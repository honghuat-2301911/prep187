from flask import Flask, render_template, request, redirect, url_for, session
import re
# from dotenv import load_dotenv
# import os

""" Regex for checking XSS and SQLi """
# Simple XSS patterns: tags or JS event handlers
xss_pattern = re.compile(
    r"(<.*?>)|((on\w*\s*?=))|((script|img|iframe|svg|body|embed|object|form)[^a-zA-Z0-9])",
    re.IGNORECASE
)
# Simple SQLi patterns: comments, tautologies, dangerous keywords
sqli_pattern = re.compile(
    r"('|--|;|/\*|\*/|\b(select|insert|update|delete|drop|alter|create|union|exec|execute|load_file|information_schema)\b)",
    re.IGNORECASE
)

def create_app():
    #load_dotenv()
    app = Flask(__name__, template_folder='templates')
    app.config['SECRET_KEY'] = 'VerySecure@71password'

    @app.route('/', methods=['GET'])
    def defaultpage():
        return render_template('home.html')
    

    @app.route('/', methods=['POST'])
    def searchpage():
        message = ''
        if request.method == 'POST':
            searchterm = request.form['searchterm']
            """ XSS and SQL checks"""
            # XSS check: look for tags or suspicious attributes
            if xss_pattern.search(searchterm):
                message = "XSS attack detected! Please enter a valid search term."
                return render_template('home.html', message=message)

            # SQL injection check: look for suspicious SQL keywords/syntax
            if sqli_pattern.search(searchterm):
                message = "SQL injection detected! Please enter a valid search term."
                return render_template('home.html', message=message)
            
            session['searchvar'] = searchterm
            return redirect(url_for('successpage'))
        return render_template('home.html', message=message)

    @app.route('/successpage')
    def successpage():
        if 'searchvar' not in session:
            return redirect(url_for('searchpage'))
        return render_template('successpage.html', searchvar=session['searchvar'])

    @app.route('/logout')
    def logout():
        session.pop('searchvar', None)
        return redirect(url_for('defaultpage'))

    return app
